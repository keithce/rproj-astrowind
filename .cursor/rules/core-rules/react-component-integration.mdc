---
description: 
globs: *.tsx,*.astro
alwaysApply: false
---
# React Component Integration in Astro

## Rule
Integrate React components in Astro applications efficiently with proper hydration strategies and component patterns.

## Guidelines

### React Component Structure
- Use functional components with Hooks
- Ensure React components are hydrated only when necessary
- Follow React best practices for state management and side effects
- Implement proper TypeScript interfaces for props

### Hydration Strategy
- Only hydrate React components that require client-side interactivity
- Use appropriate Astro client directives based on component needs
- Wrap interactive components in Suspense with fallback when needed
- Minimize client-side JavaScript bundle size

### Accessibility and Performance
- Implement proper ARIA attributes and semantic HTML
- Ensure keyboard navigability for interactive elements
- Consider `prefers-reduced-motion` for animations
- Use Error Boundaries for client-side error handling

## Examples

### Good React Component Structure
```tsx
// components/InteractiveCounter.tsx
import { useState, useCallback } from 'react';

interface CounterProps {
  initialValue?: number;
  step?: number;
  max?: number;
  onValueChange?: (value: number) => void;
}

export function InteractiveCounter({ 
  initialValue = 0, 
  step = 1, 
  max = 100,
  onValueChange 
}: CounterProps) {
  const [count, setCount] = useState(initialValue);

  const increment = useCallback(() => {
    const newValue = Math.min(count + step, max);
    setCount(newValue);
    onValueChange?.(newValue);
  }, [count, step, max, onValueChange]);

  const decrement = useCallback(() => {
    const newValue = Math.max(count - step, 0);
    setCount(newValue);
    onValueChange?.(newValue);
  }, [count, step, onValueChange]);

  return (
    <div className="counter" role="group" aria-label="Counter controls">
      <button 
        onClick={decrement}
        disabled={count <= 0}
        aria-label="Decrease count"
        className="counter__button"
      >
        -
      </button>
      
      <span 
        className="counter__value" 
        aria-live="polite"
        aria-label={`Current count: ${count}`}
      >
        {count}
      </span>
      
      <button 
        onClick={increment}
        disabled={count >= max}
        aria-label="Increase count"
        className="counter__button"
      >
        +
      </button>
    </div>
  );
}
```

### Proper Integration in Astro
```astro
---
// pages/interactive-demo.astro
import { InteractiveCounter } from '../components/InteractiveCounter.tsx';
import { LazyModal } from '../components/LazyModal.tsx';
import { ResponsiveChart } from '../components/ResponsiveChart.tsx';

const chartData = await fetch('/api/chart-data').then(res => res.json());
---

<html>
<head>
  <title>Interactive Demo</title>
</head>
<body>
  <main>
    <h1>Interactive Components Demo</h1>
    
    <!-- Critical interactivity - load immediately -->
    <section>
      <h2>Counter (Immediate Load)</h2>
      <InteractiveCounter 
        client:load 
        initialValue={5}
        max={50}
      />
    </section>
    
    <!-- Non-critical - load when visible -->
    <section>
      <h2>Chart (Lazy Load)</h2>
      <ResponsiveChart 
        client:visible 
        data={chartData}
      />
    </section>
    
    <!-- Modal - load when idle -->
    <LazyModal 
      client:idle
      title="Settings"
    />
    
    <!-- Static content - no hydration -->
    <section>
      <h2>Static Content</h2>
      <p>This content doesn't need JavaScript</p>
    </section>
  </main>
</body>
</html>
```

### Error Boundary Implementation
```tsx
// components/ErrorBoundary.tsx
import { Component, type ReactNode, type ErrorInfo } from 'react';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('React Error Boundary caught an error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <div className="error-boundary">
          <h2>Something went wrong</h2>
          <p>Please try refreshing the page</p>
        </div>
      );
    }

    return this.props.children;
  }
}
```

### Accessible Form Component
```tsx
// components/ContactForm.tsx
import { useState, type FormEvent } from 'react';

interface ContactFormProps {
  onSubmit?: (data: ContactData) => void;
}

interface ContactData {
  name: string;
  email: string;
  message: string;
}

export function ContactForm({ onSubmit }: ContactFormProps) {
  const [formData, setFormData] = useState<ContactData>({
    name: '',
    email: '',
    message: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Partial<ContactData>>({});

  const validateForm = (): boolean => {
    const newErrors: Partial<ContactData> = {};
    
    if (!formData.name.trim()) {
      newErrors.name = 'Name is required';
    }
    
    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email is invalid';
    }
    
    if (!formData.message.trim()) {
      newErrors.message = 'Message is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsSubmitting(true);
    try {
      await onSubmit?.(formData);
      setFormData({ name: '', email: '', message: '' });
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="contact-form" noValidate>
      <div className="form-group">
        <label htmlFor="name" className="form-label">
          Name *
        </label>
        <input
          id="name"
          type="text"
          value={formData.name}
          onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
          className={`form-input ${errors.name ? 'form-input--error' : ''}`}
          aria-describedby={errors.name ? 'name-error' : undefined}
          aria-invalid={!!errors.name}
        />
        {errors.name && (
          <span id="name-error" className="form-error" role="alert">
            {errors.name}
          </span>
        )}
      </div>

      <div className="form-group">
        <label htmlFor="email" className="form-label">
          Email *
        </label>
        <input
          id="email"
          type="email"
          value={formData.email}
          onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
          className={`form-input ${errors.email ? 'form-input--error' : ''}`}
          aria-describedby={errors.email ? 'email-error' : undefined}
          aria-invalid={!!errors.email}
        />
        {errors.email && (
          <span id="email-error" className="form-error" role="alert">
            {errors.email}
          </span>
        )}
      </div>

      <div className="form-group">
        <label htmlFor="message" className="form-label">
          Message *
        </label>
        <textarea
          id="message"
          value={formData.message}
          onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}
          className={`form-textarea ${errors.message ? 'form-input--error' : ''}`}
          rows={4}
          aria-describedby={errors.message ? 'message-error' : undefined}
          aria-invalid={!!errors.message}
        />
        {errors.message && (
          <span id="message-error" className="form-error" role="alert">
            {errors.message}
          </span>
        )}
      </div>

      <button 
        type="submit" 
        disabled={isSubmitting}
        className="form-submit"
        aria-describedby="submit-status"
      >
        {isSubmitting ? 'Sending...' : 'Send Message'}
      </button>
      
      <div id="submit-status" className="sr-only" aria-live="polite">
        {isSubmitting ? 'Form is being submitted' : ''}
      </div>
    </form>
  );
}
```

### Bad Practices
```tsx
// ❌ Bad - No TypeScript interfaces
export function BadComponent(props) {
  return <div>{props.title}</div>;
}

// ❌ Bad - Unnecessary hydration
// This should be a static Astro component
export function StaticContent({ title, description }) {
  return (
    <div>
      <h1>{title}</h1>
      <p>{description}</p>
    </div>
  );
}

// ❌ Bad - No accessibility considerations
export function BadButton({ onClick }) {
  return <div onClick={onClick}>Click me</div>;
}
```

## Integration Benefits
- Leverage React ecosystem within Astro
- Selective hydration for optimal performance
- Maintain component reusability
- Progressive enhancement approach
