---
import type { CollectionEntry } from 'astro:content';
import ResourceCard from './ResourceCard.astro';

export interface Props {
  entries: CollectionEntry<'resources'>[];
  class?: string;
}

const { entries, class: className = '' } = Astro.props;
---

<div class={`resource-grid ${className}`} id="resource-grid">
  {
    entries.length > 0 ? (
      <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        {entries.map(entry => (
          <ResourceCard entry={entry} class="h-full" />
        ))}
      </div>
    ) : (
      <div class="bg-muted/30 rounded-lg p-8 text-center">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="text-muted-foreground mx-auto h-16 w-16"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="1"
            d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.29-1.009-5.824-2.709M15 12a3 3 0 11-6 0 3 3 0 016 0z"
          />
        </svg>
        <h3 class="text-foreground mt-4 text-xl font-medium">No resources found</h3>
        <p class="text-muted-foreground mt-2">
          Try adjusting your search terms or filters to find what you're looking for.
        </p>
        <a href="/resources" class="text-primary hover:text-accent mt-4 inline-block">
          View all resources
        </a>
      </div>
    )
  }
</div>

<script>
  // Basic implementation for future enhancements like infinite scroll
  document.addEventListener('DOMContentLoaded', () => {
    const gridContainer = document.getElementById('resource-grid');
    if (!gridContainer) return;

    // Placeholder for future infinite scroll implementation
    // This could be expanded to load more resources as the user scrolls
  });
</script>
