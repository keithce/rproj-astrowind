---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
  showScrollIndicator = false,
  gradientBg = false,
} = Astro.props;
---

<section
  class="relative flex items-center justify-center w-full min-h-screen overflow-hidden not-prose"
  {...id ? { id } : {}}
>
  <!-- Gradient Background (when gradientBg is true) -->
  {
    gradientBg && (
      <div class="absolute inset-0 z-0 w-full h-full overflow-hidden pointer-events-none" aria-hidden="true">
        <div class="w-full h-full bg-gradient-to-br from-accent via-muted to-background dark:from-background dark:via-secondary dark:to-card" />
      </div>
    )
  }

  <!-- Background Image Layer -->
  {
    image && (
      <div class="absolute inset-0 w-full h-full overflow-hidden pointer-events-none z-1" aria-hidden="true">
        {typeof image === 'string' ? (
          <img
            src={image}
            alt=""
            class="absolute bottom-0 object-cover object-bottom min-w-full min-h-full -translate-x-1/2 left-1/2 opacity-30"
            loading="eager"
            decoding="async"
          />
        ) : (
          <Image
            class="absolute bottom-0 object-cover object-bottom min-w-full min-h-full -translate-x-1/2 left-1/2 opacity-30"
            widths={[400, 768, 1024, 2040]}
            sizes="100vw"
            loading="eager"
            width={1024}
            height={576}
            alt=""
            {...image}
          />
        )}
      </div>
    )
  }

  <!-- Optional BG slot (e.g., overlays, gradients) -->
  <div class="absolute inset-0 pointer-events-none z-4" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>

  <!-- Hero Content -->
  <div
    class="relative z-10 flex flex-col justify-center w-full max-w-full min-h-screen px-4 pt-20 mx-auto sm:max-w-3xl md:max-w-5xl sm:px-6"
  >
    <div class="flex flex-col items-center justify-center flex-grow">
      <div class="w-full text-center">
        {
          tagline && (
            <p
              class={`text-base font-bold tracking-wide uppercase animate-fade-in ${
                gradientBg ? 'text-accent' : 'text-secondary'
              }`}
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class={`break-words whitespace-normal font-bold leading-tight tracking-tighter mb-4 font-heading animate-fade-in text-foreground ${
                gradientBg ? 'text-5xl md:text-7xl' : 'text-xl sm:text-3xl md:text-5xl lg:text-6xl'
              }`}
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p
                class={`mb-6 animate-fade-in leading-relaxed text-foreground/80 ${
                  gradientBg ? 'text-xl md:text-2xl' : 'text-xl'
                }`}
                set:html={subtitle}
              />
            )
          }
          {
            actions && (
              <div class="flex flex-col max-w-xs gap-4 m-auto mb-8 sm:max-w-md flex-nowrap sm:flex-row sm:justify-center animate-fade-in">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>

  <!-- Scroll Down Indicator -->
  {
    showScrollIndicator && (
      <div class="absolute z-20 transform -translate-x-1/2 bottom-8 left-1/2 animate-bounce">
        <svg class={`w-6 h-6 text-foreground`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
        </svg>
      </div>
    )
  }
</section>
