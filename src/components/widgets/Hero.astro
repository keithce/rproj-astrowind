---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
  showScrollIndicator = false,
  gradientBg = false,
} = Astro.props;
---

<section
  class="relative min-h-screen w-full flex items-center justify-center not-prose overflow-hidden"
  {...id ? { id } : {}}
>
  <!-- Gradient Background (when gradientBg is true) -->
  {
    gradientBg && (
      <div class="absolute inset-0 w-full h-full z-0 pointer-events-none overflow-hidden" aria-hidden="true">
        <div class="w-full h-full bg-gradient-to-br from-myColor-100 via-myColor-300 to-myColor-200 dark:from-myColor-900 dark:via-[var(--aw-color-secondary)] dark:to-myColor-900" />
      </div>
    )
  }

  <!-- Background Image Layer -->
  {
    image && (
      <div class="absolute inset-0 w-full h-full z-1 pointer-events-none overflow-hidden" aria-hidden="true">
        {typeof image === 'string' ? (
          <img
            src={image}
            alt=""
            class="absolute left-1/2 bottom-0 min-w-full min-h-full object-cover object-bottom -translate-x-1/2 opacity-30"
            loading="eager"
            decoding="async"
          />
        ) : (
          <Image
            class="absolute left-1/2 bottom-0 min-w-full min-h-full object-cover object-bottom -translate-x-1/2 opacity-30"
            widths={[400, 768, 1024, 2040]}
            sizes="100vw"
            loading="eager"
            width={1024}
            height={576}
            alt=""
            {...image}
          />
        )}
      </div>
    )
  }

  <!-- Dark overlay for better text contrast when using images with gradient -->
  {gradientBg && image && <div class="absolute inset-0 z-2 pointer-events-none bg-black/20" aria-hidden="true" />}

  <!-- Gradient Overlay for Text Contrast (original behavior when not using gradientBg) -->
  {
    !gradientBg && (
      <div
        class="absolute inset-0 z-3 pointer-events-none \
          bg-gradient-to-b from-white/60 via-white/20 to-transparent\
          dark:from-black/50 dark:via-black/20 dark:to-transparent"
      />
    )
  }

  <!-- Optional BG slot (e.g., overlays, gradients) -->
  <div class="absolute inset-0 pointer-events-none z-4" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>

  <!-- Hero Content -->
  <div
    class="relative z-10 w-full max-w-full sm:max-w-3xl md:max-w-5xl mx-auto px-4 sm:px-6 flex flex-col justify-center min-h-screen pt-20"
  >
    <div class="flex flex-col items-center justify-center flex-grow">
      <div class="text-center w-full">
        {
          tagline && (
            <p
              class={`text-base font-bold tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade ${
                gradientBg
                  ? 'text-[var(--aw-color-accent)] dark:text-[var(--aw-color-accent)]'
                  : 'text-secondary dark:text-blue-200'
              }`}
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class={`break-words whitespace-normal font-bold leading-tight tracking-tighter mb-4 font-heading intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade ${
                gradientBg
                  ? 'text-5xl md:text-7xl text-myColor-800 dark:text-white'
                  : 'text-xl sm:text-3xl md:text-5xl lg:text-6xl dark:text-gray-200'
              }`}
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p
                class={`mb-6 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade leading-relaxed ${
                  gradientBg
                    ? 'text-xl md:text-2xl text-myColor-600 dark:text-gray-200'
                    : 'text-xl text-muted dark:text-muted-foreground'
                }`}
                set:html={subtitle}
              />
            )
          }
          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade mb-8">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>

  <!-- Scroll Down Indicator -->
  {
    showScrollIndicator && (
      <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce z-20">
        <svg
          class={`w-6 h-6 ${gradientBg ? 'text-myColor-700 dark:text-white' : 'text-[var(--aw-color-text-default)] dark:text-white'}`}
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
        </svg>
      </div>
    )
  }
</section>
