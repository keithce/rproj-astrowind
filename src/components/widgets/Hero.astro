---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative min-h-screen w-full flex items-center justify-center not-prose overflow-hidden" {...id ? { id } : {}}>
  <!-- Background Image Layer -->
  {image && (
    <div class="absolute inset-0 w-full h-full z-0 pointer-events-none overflow-hidden" aria-hidden="true">
      {typeof image === 'string' ? (
        <img
          src={image}
          alt=""
          class="absolute left-1/2 bottom-0 min-w-full min-h-full object-cover object-bottom -translate-x-1/2"
          loading="eager"
          decoding="async"
        />
      ) : (
        <Image
          class="absolute left-1/2 bottom-0 min-w-full min-h-full object-cover object-bottom -translate-x-1/2"
          widths={[400, 768, 1024, 2040]}
          sizes="100vw"
          loading="eager"
          width={1024}
          height={576}
          alt=""
          {...image}
        />
      )}
    </div>
  )}

  <!-- Gradient Overlay for Text Contrast -->
  <div
    class="absolute inset-0 z-10 pointer-events-none \
      bg-gradient-to-b from-white/80 via-white/40 to-transparent\
      dark:from-black/60 dark:via-black/30 dark:to-transparent">
  </div>

  <!-- Optional BG slot (e.g., overlays, gradients) -->
  <div class="absolute inset-0 pointer-events-none z-20" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>

  <!-- Hero Content -->
  <div class="relative z-30 w-full max-w-full sm:max-w-3xl md:max-w-5xl mx-auto px-4 sm:px-6 flex flex-col justify-center min-h-screen">
    <div class="flex flex-col items-center justify-center flex-grow">
      <div class="text-center w-full">
        {
          tagline && (
            <p
              class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="break-words whitespace-normal text-xl sm:text-3xl md:text-5xl lg:text-6xl font-bold leading-tight tracking-tighter mb-4 font-heading dark:text-gray-200 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p
                class="text-xl text-muted mb-6 dark:text-slate-300 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                set:html={subtitle}
              />
            )
          }
          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>
</section>
