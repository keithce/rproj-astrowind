---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import Button from '~/components/ui/Button.astro';
import NavigationMenu from '~/components/ui/NavigationMenu.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ServiceNavigation from '~/components/ui/ServiceNavigation.astro';

import { getHomePermalink, getAsset } from '~/utils/permalinks';
import type { CallToAction } from '~/types';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
  showServiceNav?: boolean;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
  showServiceNav = false,
} = Astro.props;

// Determine current service for navigation highlighting
const currentPath = Astro.url.pathname;
let currentService: string | undefined;
if (currentPath.startsWith('/services/')) {
  currentService = currentPath.split('/')[2];
}
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-b border-transparent transition-all duration-300 ease-in-out',
    'header-bg',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative text-foreground py-3 px-3 md:px-6 mx-auto w-full',
      {
        'md:flex md:justify-between': position !== 'center',
      },
      {
        'md:grid md:grid-cols-3 md:items-center': position === 'center',
      },
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      id="navigation"
      role="navigation"
      aria-label="Main navigation"
      class="hidden items-center w-full md:flex md:w-auto md:mx-5 text-foreground md:justify-self-center"
    >
      <NavigationMenu links={links} orientation="horizontal" showChevrons={true} className="w-full" />
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden md:self-center md:flex items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0 md:justify-self-end',
      ]}
    >
      <div class="flex justify-between items-center w-full md:w-auto">
        <div class="flex gap-2 items-center">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
          {
            showRssFeed && (
              <a
                class="inline-flex items-center p-2.5 text-sm rounded-lg text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-hidden focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <Icon name="tabler:rss" class="w-5 h-5" />
              </a>
            )
          }
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map((btnProps) => (
                <Button
                  {...btnProps}
                  class="py-2.5 ml-2 w-auto text-sm font-semibold whitespace-nowrap shadow-none px-5.5 md:px-6"
                />
              ))}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>

    {
      showServiceNav && (
        <div class="border-t border-border bg-muted/30">
          <div class="max-w-7xl mx-auto px-4 sm:px-6 py-3">
            <ServiceNavigation currentService={currentService} variant="horizontal" />
          </div>
        </div>
      )
    }
  </div>
</header>
