---
import type { CallToAction } from '~/types';
import Button from '~/components/ui/Button.astro';

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  callToAction?: string | CallToAction;
  callToAction2?: string | CallToAction;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  callToAction = await Astro.slots.render('callToAction'),
  callToAction2 = await Astro.slots.render('callToAction2'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose">
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
  <div class="relative px-4 mx-auto max-w-7xl sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 pb-8 md:py-20 md:pb-8">
      <div class="max-w-5xl mx-auto text-center">
        {
          tagline && (
            <p
              class="text-base font-bold tracking-wide uppercase text-secondary dark:text-blue-200 animate-fade-in"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="mb-4 text-5xl font-bold tracking-tighter md:text-6xl leading-tighter font-heading dark:text-gray-200 animate-fade-in"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p class="mb-6 text-xl text-muted dark:text-muted-foreground animate-fade-in" set:html={subtitle} />
            )
          }
          <div
            class="flex flex-col max-w-xs gap-4 m-auto sm:max-w-md flex-nowrap sm:flex-row sm:justify-center animate-fade-in"
          >
            {
              callToAction && (
                <div class="flex w-full sm:w-auto">
                  {typeof callToAction === 'string' ? (
                    <Fragment set:html={callToAction} />
                  ) : (
                    <Button variant="primary" {...callToAction} />
                  )}
                </div>
              )
            }
            {
              callToAction2 && (
                <div class="flex w-full sm:w-auto">
                  {typeof callToAction2 === 'string' ? (
                    <Fragment set:html={callToAction2} />
                  ) : (
                    <Button {...callToAction2} />
                  )}
                </div>
              )
            }
          </div>
        </div>
        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>
</section>
