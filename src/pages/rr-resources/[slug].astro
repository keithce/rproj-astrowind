---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';
import type { CollectionEntry } from 'astro:content';
import Layout from '~/layouts/PageLayout.astro';
import { getCollection } from 'astro:content';
import { cleanSlug, getPermalink } from '~/utils/permalinks';

export const prerender = true;

export const getStaticPaths = (async () => {
  const entries = await getCollection('rrresources');
  return entries.map((entry: CollectionEntry<'rrresources'>) => {
    const name = entry.data.Name || entry.id;
    const slug = cleanSlug(name);
    return {
      params: { slug },
      props: { entry },
    };
  });
}) satisfies GetStaticPaths;

// Properly typed props using the generic type
type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const { entry } = Astro.props as Props;
const data = entry.data;
const title = data.Name || 'Resource';
const description = data['AI summary'] || data.Source || '';
// Use the actual route slug parameter for canonical URL, fallback to sanitized title if needed
const routeSlug = Astro.params.slug;
const canonical = getPermalink(`/rr-resources/${routeSlug || cleanSlug(title)}`, 'post');
---

<Layout metadata={{ title, description, canonical }}>
  <article class="prose prose-gray dark:prose-invert container mx-auto max-w-3xl px-4 py-8">
    <h1>{title}</h1>

    {
      data.Source && (
        <p>
          Original:{' '}
          <a href={data.Source} rel="noopener noreferrer" target="_blank">
            {data.Source}
          </a>
        </p>
      )
    }

    {data['AI summary'] && <p class="mt-4 text-base">{data['AI summary']}</p>}

    {
      data.Type?.length && (
        <p class="mt-4 text-sm">
          <strong>Type:</strong> {data.Type.join(', ')}
        </p>
      )
    }
    {
      data.Category?.length && (
        <p class="mt-2 text-sm">
          <strong>Category:</strong> {data.Category.join(', ')}
        </p>
      )
    }
    {
      data.Tags?.length && (
        <p class="mt-2 text-sm">
          <strong>Tags:</strong> {data.Tags.join(', ')}
        </p>
      )
    }

    {
      data.Keywords?.length && (
        <details class="mt-6">
          <summary class="cursor-pointer">Keywords</summary>
          <ul class="mt-2 text-sm">
            {data.Keywords.map((keyword: string) => (
              <li>{keyword}</li>
            ))}
          </ul>
        </details>
      )
    }
  </article>
</Layout>
