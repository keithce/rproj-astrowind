---
// @ts-nocheck
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';
import type { CollectionEntry } from 'astro:content';
import Layout from '~/layouts/PageLayout.astro';
import { getCollection } from 'astro:content';
import { cleanSlug, getPermalink } from '~/utils/permalinks';
import { getNotionEntryTitle } from '~/utils/notion';

export const prerender = true;

export const getStaticPaths = (async () => {
  const entries = (await getCollection('rrresources' as any)) as any[];
  return entries.map((entry: CollectionEntry<'rrresources'>) => {
    const name = getNotionEntryTitle(entry);
    const slug = cleanSlug(name);
    return {
      params: { slug },
      props: { entry },
    };
  });
}) satisfies GetStaticPaths;

// Properly typed props using the generic type
type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const { entry } = Astro.props as Props;
const data = entry.data;
const title = data.Name || getNotionEntryTitle(entry) || 'Resource';
const description = data['AI summary'] || data.Source || '';
// Use the actual route slug parameter for canonical URL, fallback to sanitized title if needed
const routeSlug = Astro.params.slug;
const canonical = getPermalink(`/rr-resources/${routeSlug || cleanSlug(title)}`, 'post');
---

<Layout metadata={{ title, description, canonical }}>
  <article class="prose prose-gray dark:prose-invert container mx-auto max-w-3xl px-4 py-8">
    <h1 class="mb-4">{title}</h1>

    {data['AI summary'] && (
      <details class="mb-6 rounded-lg border bg-white/60 p-4 dark:bg-gray-900/60">
        <summary class="cursor-pointer select-none text-base font-semibold">AI summary</summary>
        <div class="mt-3 text-base leading-relaxed">{data['AI summary']}</div>
      </details>
    )}

    {
      data.Type?.length && (
        <p class="mt-4 text-sm">
          <strong>Type:</strong> {data.Type.join(', ')}
        </p>
      )
    }
    {
      data.Category?.length && (
        <p class="mt-2 text-sm">
          <strong>Category:</strong> {data.Category.join(', ')}
        </p>
      )
    }
    {
      data.Tags?.length && (
        <p class="mt-2 text-sm">
          <strong>Tags:</strong> {data.Tags.join(', ')}
        </p>
      )
    }

    <footer class="mt-10 space-y-4">
      {data.Source && (
        <p class="text-sm">
          <strong>Source:</strong>{' '}
          <a class="underline underline-offset-2" href={data.Source} rel="noopener noreferrer" target="_blank">
            {data.Source}
          </a>
        </p>
      )}

      {data.Keywords?.length && (
        <div class="flex flex-wrap gap-2">
          {data.Keywords.map((kw: string) => (
            <span class="inline-flex items-center rounded-full bg-brand-100 px-3 py-1 text-xs font-medium text-brand-800 dark:bg-brand-900/40 dark:text-brand-100">
              {kw}
            </span>
          ))}
        </div>
      )}
    </footer>

    {/* Render Notion page HTML content */}
    {Boolean((entry as any).rendered?.html) && (
      <div class="mt-10 notion-content" set:html={(entry as any).rendered.html} />
    )}
    <div id="debug-rendered-present" style="display:none">{(entry as any).rendered ? '1' : '0'}</div>
  </article>
</Layout>
