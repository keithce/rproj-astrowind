---
import type { GetStaticPaths } from 'astro';
import Layout from '~/layouts/PageLayout.astro';
import { getCollection } from 'astro:content';
import { cleanSlug, getPermalink } from '~/utils/permalinks';
import { getNotionEntryTitle } from '~/utils/notion';

export const prerender = true;

// Local, minimal types to keep lint/type errors away while staying descriptive
type RRData = {
  Name?: string;
  Source?: string;
  Tags?: string[];
  Type?: string[];
  Category?: string[];
  Keywords?: string[];
  'AI summary'?: string;
  properties?: Record<string, unknown>;
  flat?: Record<string, unknown>;
};
type RREntry = { id: string; data: RRData } & Record<string, unknown>;

export const getStaticPaths = (async () => {
  const getCollectionLoose = getCollection as unknown as (c: string) => Promise<RREntry[]>;
  const entries = await getCollectionLoose('rrresources');
  return entries.map((entry: RREntry) => {
    const name = getNotionEntryTitle(entry);
    const slug = cleanSlug(name);
    return {
      params: { slug },
      props: { entry },
    };
  });
}) satisfies GetStaticPaths;

// Properly typed props using the generic type
type Props = { entry: RREntry };
type RRRendered = { rendered?: { html?: string } };
const { entry } = Astro.props as Props;
const data = entry.data as RRData;

// Derive a flat map from raw Notion properties if `data.flat` isn't present
type NotionProp = Record<string, unknown> & { type?: string };
function flattenProperties(props: Record<string, NotionProp> | undefined): Record<string, unknown> {
  if (!props || typeof props !== 'object') return {};
  const out: Record<string, unknown> = {};
  for (const [key, prop] of Object.entries(props)) {
    const t = prop?.type as string | undefined;
    let value: unknown;
    switch (t) {
      case 'number':
        value = prop.number; break;
      case 'url':
        value = typeof prop.url === 'string' && prop.url.trim() ? prop.url : undefined; break;
      case 'email':
        value = prop.email ?? undefined; break;
      case 'phone_number':
        value = prop.phone_number ?? undefined; break;
      case 'checkbox':
        value = prop.checkbox; break;
      case 'select':
        value = (prop as { select?: { name?: string } }).select?.name ?? null; break;
      case 'multi_select':
        value = Array.isArray((prop as { multi_select?: Array<{ name?: string }> }).multi_select)
          ? ((prop as { multi_select?: Array<{ name?: string }> }).multi_select || [])
              .map((o) => o?.name)
              .filter(Boolean)
          : [];
        break;
      case 'status':
        value = (prop as { status?: { name?: string } }).status?.name ?? null; break;
      case 'title':
        value = Array.isArray((prop as { title?: Array<{ plain_text?: string }> }).title)
          ? ((prop as { title?: Array<{ plain_text?: string }> }).title || [])
              .map((rt) => rt?.plain_text || '')
              .join('')
          : '';
        break;
      case 'rich_text':
        value = Array.isArray((prop as { rich_text?: Array<{ plain_text?: string }> }).rich_text)
          ? ((prop as { rich_text?: Array<{ plain_text?: string }> }).rich_text || [])
              .map((rt) => rt?.plain_text || '')
              .join('')
          : '';
        break;
      case 'date':
        value = (prop as { date?: { start?: string } }).date?.start ?? undefined; break;
      case 'created_time':
        value = prop.created_time ?? undefined; break;
      case 'last_edited_time':
        value = prop.last_edited_time ?? undefined; break;
      default:
        value = prop;
    }
    if (value !== null && value !== undefined) {
      out[key] = value;
    }
  }
  return out;
}
const title = data.Name || getNotionEntryTitle(entry) || 'Resource';
const description = data['AI summary'] || data.Source || '';
// Use the actual route slug parameter for canonical URL, fallback to sanitized title if needed
const routeSlug = Astro.params.slug;
const canonical = getPermalink(`/rr-resources/${routeSlug || cleanSlug(title)}`, 'post');

if (Astro.props && process.env.NOTION_TRACE === '1') {
  const keys = Object.keys((data as Record<string, unknown>) || {});
  console.debug('[rrresources:slug] id=', (entry as { id: string }).id, 'keys=', keys);
}

// Debug toggles: show property dump in non-production or when NOTION_TRACE=1
const showDebug = (process?.env?.NOTION_TRACE === '1') || import.meta.env.MODE !== 'production';
const flatDataForDebug = (data.flat as Record<string, unknown> | undefined)
  ?? flattenProperties(data.properties as Record<string, NotionProp> | undefined)
  ?? ((() => {
    const rest: Record<string, unknown> = { ...(data as Record<string, unknown>) };
    delete (rest as Record<string, unknown>).properties;
    return rest;
  })());
const propertyKeys = Object.keys((data.properties || {}) as Record<string, unknown>);
const rawPropsForDebug: Record<string, unknown> = (data.properties || {}) as Record<string, unknown>;
---

<Layout metadata={{ title, description, canonical }}>
  <article class="container px-4 py-8 mx-auto max-w-3xl prose prose-gray dark:prose-invert">
    <h1 class="mb-4">{title}</h1>

    {
      data['AI summary'] && (
        <details class="p-4 mb-6 rounded-lg border bg-white/60 dark:bg-gray-900/60">
          <summary class="text-base font-semibold cursor-pointer select-none">AI summary</summary>
          <div class="mt-3 text-base leading-relaxed">{data['AI summary']}</div>
        </details>
      )
    }

    {
      data.Type?.length && (
        <p class="mt-4 text-sm">
          <strong>Type:</strong> {data.Type.join(', ')}
        </p>
      )
    }
    {
      data.Category?.length && (
        <p class="mt-2 text-sm">
          <strong>Category:</strong> {data.Category.join(', ')}
        </p>
      )
    }
    {
      data.Tags?.length && (
        <p class="mt-2 text-sm">
          <strong>Tags:</strong> {data.Tags.join(', ')}
        </p>
      )
    }

    {showDebug && (
      <details class="mt-6 rounded-lg border border-gray-200/60 dark:border-gray-700/60 bg-gray-50/60 dark:bg-gray-800/40">
        <summary class="px-3 py-2 text-sm font-medium cursor-pointer select-none">Debug: Notion Properties</summary>
        <div class="px-3 pt-2 pb-3 text-xs leading-relaxed">
          <p class="mb-2 text-gray-700 dark:text-gray-300">Flat data (flattened values):</p>
          <pre class="overflow-x-auto p-3 text-gray-900 bg-gray-100 rounded-md dark:bg-gray-900 dark:text-gray-100">
{JSON.stringify(flatDataForDebug, null, 2)}
          </pre>
          {propertyKeys.length > 0 && (
            <div class="mt-4">
              <p class="mb-2 text-gray-700 dark:text-gray-300">Raw Notion properties:</p>
              <pre class="overflow-x-auto p-3 text-gray-900 bg-gray-100 rounded-md dark:bg-gray-900 dark:text-gray-100">
{JSON.stringify(rawPropsForDebug, null, 2)}
              </pre>
            </div>
          )}
        </div>
      </details>
    )}

    <footer class="mt-10 space-y-4">
      {
        data.Source && (
          <p class="text-sm">
            <strong>Source:</strong>{' '}
            <a
              class="underline underline-offset-2"
              href={data.Source}
              rel="noopener noreferrer"
              target="_blank"
            >
              {data.Source}
            </a>
          </p>
        )
      }

      {
        data.Keywords?.length && (
          <div class="flex flex-wrap gap-2">
            {data.Keywords.map((kw: string) => (
              <span class="inline-flex items-center px-3 py-1 text-xs font-medium rounded-full bg-brand-100 text-brand-800 dark:bg-brand-900/40 dark:text-brand-100">
                {kw}
              </span>
            ))}
          </div>
        )
      }
    </footer>

    {/* Render Notion page HTML content */}
    {
      (() => {
        const renderedHtml = (entry as unknown as RRRendered).rendered?.html;
        return renderedHtml ? <div class="mt-10 notion-content" set:html={renderedHtml} /> : null;
      })()
    }
    <div id="debug-rendered-present" style="display:none">
      {(entry as unknown as RRRendered).rendered ? '1' : '0'}
    </div>
  </article>
</Layout>
