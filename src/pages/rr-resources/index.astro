---
import Layout from '~/layouts/PageLayout.astro';
import { getLiveCollection, getCollection } from 'astro:content';
import { cleanSlug, getPermalink } from '~/utils/permalinks';
import { getNotionEntryTitle } from '~/utils/notion';

type RRData = {
  Name?: string;
  Type?: string[];
  Category?: string[];
  flat?: Record<string, unknown>;
};
type RREntry = { id: string; data: RRData };
async function fetchItems(): Promise<RREntry[]> {
  try {
    // Prefer stable content first
    const getCollectionLoose = getCollection as unknown as (c: string) => Promise<RREntry[]>;
    const coll = await getCollectionLoose('rrresources');
    if (Array.isArray(coll) && coll.length > 0) return coll;
  } catch {
    // ignore
  }
  try {
    const live = (await getLiveCollection('rrresources' as unknown as string)) as unknown as {
      entries?: RREntry[];
      error?: Error | null;
    };

    if (live?.error) {
      console.error('Live collection error:', live.error);
      return [];
    }

    return Array.isArray(live?.entries) ? (live!.entries as RREntry[]) : [];
  } catch {
    return [] as RREntry[];
  }
}

const items = await fetchItems();

// (optional) trace removed to satisfy linter

const title = 'RR Resources';
const description = 'Curated resources from the Notion database';

// use helper to extract title consistently
---

<Layout metadata={{ title, description }}>
  <section class="container mx-auto px-4 py-8">
    <h1 class="mb-6 text-3xl font-bold">{title}</h1>
    {
      items.length === 0 ? (
        <p>No resources found.</p>
      ) : (
        <ul class="grid grid-cols-1 gap-6 md:grid-cols-2 xl:grid-cols-3">
          {items.map((entry: RREntry) => {
            const data: RRData = (entry.data ?? {}) as RRData;
            const titleText =
              data.Name ??
              getNotionEntryTitle({ id: entry.id, data: entry.data } as unknown as {
                id: string;
                data: unknown;
              });
            const slug = cleanSlug(titleText);
            const href = getPermalink(`/rr-resources/${slug}`, 'post');
            const type = Array.isArray(data.Type) ? data.Type[0] : undefined;
            const category = Array.isArray(data.Category) ? data.Category[0] : undefined;

            // optional trace removed for lint cleanliness

            return (
              <li class="rounded-lg border bg-white p-4 dark:bg-gray-900">
                <a href={href} class="text-lg font-semibold hover:underline">
                  {titleText}
                </a>
                {(type || category) && (
                  <p class="mt-2 text-sm text-gray-600 dark:text-gray-300">
                    {type ? `Type: ${type}` : ''}
                    {type && category ? ' Â· ' : ''}
                    {category ? `Category: ${category}` : ''}
                  </p>
                )}
              </li>
            );
          })}
        </ul>
      )
    }
  </section>
</Layout>
