---
import Layout from '~/layouts/PageLayout.astro';
import RrSearch from '~/components/resources/ResourceSearch.astro';
import RrFilterSheet from '~/components/resources/ResourceFilterSheet.astro';
import ResourceGrid from '~/components/resources/ResourceGrid.astro';
import Pagination from '~/components/common/Pagination.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import { findResourceCategories, findResourceTypes } from '~/utils/resources';

type ResourceEntry = CollectionEntry<'resources'>;

export const prerender = true;

export async function getStaticPaths({
  paginate,
}: {
  paginate: (data: ResourceEntry[], options: { params: Record<string, string>; pageSize: number }) => unknown[];
}) {
  const allEntries = await getCollection('resources');
  const allTypes = await findResourceTypes();

  // For every type, return a `paginate()` result.
  // Make sure that you pass `{ params: { type }}` to `paginate()`
  // so that Astro knows which type grouping the result is for.
  return allTypes.flatMap(type => {
    const filteredEntries = allEntries.filter((entry: ResourceEntry) => {
      const data = entry.data;
      const entryTypes = data.Type;
      return Array.isArray(entryTypes) ? entryTypes.includes(type) : entryTypes === type;
    });

    // Always generate paths, even for empty results
    if (filteredEntries.length > 0) {
      return paginate(filteredEntries, {
        params: { type },
        pageSize: 12,
      });
    } else {
      // Generate a single page for empty results
      return [
        {
          params: { type, page: '1' },
          props: {
            page: {
              data: [],
              url: {
                current: 1,
                prev: undefined,
                next: undefined,
                first: undefined,
                last: undefined,
              },
              size: 12,
              total: 0,
            },
          },
        },
      ];
    }
  });
}

// Get all entries for client-side search filtering
const allEntries = await getCollection('resources');

const { page } = Astro.props as {
  page: {
    data: ResourceEntry[];
    total: number;
    size: number;
    url: { prev?: string; next?: string; first?: string; last?: string };
  };
};
const params = Astro.params as { type: string; page: string };

// Get the type and category information
const allTypes = await findResourceTypes();
const allCategories = await findResourceCategories();
const decodedType = decodeURIComponent(params.type);

// Get URL parameters
const searchQuery = Astro.url.searchParams.get('search') || null;

// Filter entries based on search query (client-side filtering for search)
let displayEntries = page.data;
let totalEntries = page.total;
let totalPages = Math.ceil(totalEntries / page.size);
let currentPage = parseInt(params.page);

// Handle search filtering across all entries of this type
if (searchQuery) {
  const searchTerm = searchQuery.toLowerCase();
  displayEntries = allEntries.filter((entry: ResourceEntry) => {
    const data = entry.data;
    const entryTypes = data.Type;
    const matchesType = Array.isArray(entryTypes) ? entryTypes.includes(decodedType) : entryTypes === decodedType;

    if (!matchesType) return false;

    const name = data.Name || '';
    const summary = data['AI summary'] || '';
    return name.toLowerCase().includes(searchTerm) || summary.toLowerCase().includes(searchTerm);
  });

  // When search is active, disable pagination and show all results on one "page"
  totalEntries = displayEntries.length;
  totalPages = 1;
  currentPage = 1;
}

// Generate title
const title = 'RR Resources';
const pageTitle = `${title}: ${decodedType} (Page ${currentPage} of ${totalPages})`;

// SEO metadata
const seoTitle = searchQuery ? `${title}: ${decodedType} - "${searchQuery}" - Page ${currentPage}` : pageTitle;
const seoDescription = `Resources of type ${decodedType}. ${page.total} resources found.`;
---

<Layout
  metadata={{
    title: seoTitle,
    description: seoDescription,
    canonical: Astro.url.href,
  }}
>
  <div class="mx-auto max-w-7xl px-6 py-8 md:px-8">
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="leading-tighter text-3xl font-bold tracking-tighter md:text-4xl">
            {title}: {decodedType}
            {searchQuery && <span class="text-primary">: "{searchQuery}"</span>}
            <span class="text-muted-foreground text-lg font-normal">(Page {currentPage} of {totalPages})</span>
          </h1>
          <p class="text-muted-foreground mt-2">
            {page.total} resources of type {decodedType}
          </p>
        </div>
        <RrFilterSheet
          categories={allCategories}
          types={allTypes}
          selectedType={decodedType || undefined}
          selectedCategory={undefined}
        />
      </div>
    </div>

    {/* Search*/}
    <div class="mb-8">
      <RrSearch />
    </div>

    {/* Search Results or Content*/}
    {
      displayEntries.length > 0 ? (
        <div>
          <ResourceGrid entries={displayEntries} />

          {/* Pagination - disabled when search is active */}
          <div class="mt-8">
            {searchQuery ? (
              <div class="text-muted-foreground text-center text-sm">
                Showing all {totalEntries} results for "{searchQuery}" of type {decodedType}
              </div>
            ) : (
              <Pagination
                currentPage={currentPage}
                lastPage={totalPages}
                prevUrl={page.url.prev}
                nextUrl={page.url.next}
                firstUrl={page.url.first}
                lastUrl={page.url.last}
                baseUrl={`/resources/type/${params.type}`}
                queryParams={Astro.url.searchParams}
              />
            )}
          </div>
        </div>
      ) : (
        <div class="py-16 text-center">
          <div class="mx-auto max-w-md">
            <div class="mb-6">
              <div class="bg-muted mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full">
                <svg class="text-muted-foreground h-8 w-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </div>
              <h2 class="text-foreground mb-2 text-2xl font-semibold">
                {searchQuery ? 'No search results found' : `No ${decodedType} resources yet`}
              </h2>
              <p class="text-muted-foreground mb-6">
                {searchQuery
                  ? `We couldn't find any resources matching "${searchQuery}" of type ${decodedType}.`
                  : `We don't have any ${decodedType} resources yet, but we're always adding new content.`}
              </p>
            </div>

            <div class="space-y-4">
              <a
                href="/resources/all/1"
                class="bg-primary text-primary-foreground hover:bg-primary/90 inline-flex items-center justify-center rounded-md px-6 py-3 transition-colors"
              >
                <svg class="mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
                  />
                </svg>
                Browse all resources
              </a>

              <div class="border-border border-t pt-4">
                <p class="text-muted-foreground mb-3 text-sm">Or explore by category:</p>
                <div class="flex flex-wrap justify-center gap-2">
                  {allCategories.slice(0, 4).map((category: string) => (
                    <a
                      href={`/resources/category/${encodeURIComponent(category)}/1`}
                      class="bg-secondary text-secondary-foreground hover:bg-secondary/80 inline-flex items-center rounded-full px-3 py-1 text-sm transition-colors"
                    >
                      {category}
                    </a>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      )
    }
  </div>
</Layout>
