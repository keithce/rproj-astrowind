---
import Layout from '~/layouts/PageLayout.astro';
import RrSearch from '~/components/resources/ResourceSearch.astro';
import RrFilterSheet from '~/components/resources/ResourceFilterSheet.astro';
import ResourceGrid from '~/components/resources/ResourceGrid.astro';
import Pagination from '~/components/common/Pagination.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import { findResourceCategories, findResourceTypes } from '~/utils/resources';

type ResourceEntry = CollectionEntry<'resources'>;

export const prerender = true;

export async function getStaticPaths({
  paginate,
}: {
  paginate: (data: ResourceEntry[], options: { params: Record<string, string>; pageSize: number }) => unknown[];
}) {
  const allEntries = await getCollection('resources');
  const allCategories = await findResourceCategories();
  const allTypes = await findResourceTypes();

  // Generate paths for every combination of category and type
  const paths = [];

  for (const category of allCategories) {
    for (const type of allTypes) {
      const filteredEntries = allEntries.filter((entry: ResourceEntry) => {
        const data = entry.data;
        const entryCategories = data.Category;
        const entryTypes = data.Type;

        const categoryMatch = Array.isArray(entryCategories)
          ? entryCategories.includes(category)
          : entryCategories === category;

        const typeMatch = Array.isArray(entryTypes) ? entryTypes.includes(type) : entryTypes === type;

        return categoryMatch && typeMatch;
      });

      // Always generate paths, even for empty results
      if (filteredEntries.length > 0) {
        paths.push(
          ...paginate(filteredEntries, {
            params: { category, type },
            pageSize: 12,
          })
        );
      } else {
        // Generate a single page for empty results
        paths.push({
          params: { category, type, page: '1' },
          props: {
            page: {
              data: [],
              url: {
                current: 1,
                prev: undefined,
                next: undefined,
                first: undefined,
                last: undefined,
              },
              size: 12,
              total: 0,
            },
          },
        });
      }
    }
  }

  return paths;
}

const { page } = Astro.props as {
  page: {
    data: ResourceEntry[];
    total: number;
    size: number;
    url: { prev?: string; next?: string; first?: string; last?: string };
  };
};
const params = Astro.params as { category: string; type: string; page: string };

// Get the category and type information
const allCategories = await findResourceCategories();
const allTypes = await findResourceTypes();
const decodedCategory = decodeURIComponent(params.category);
const decodedType = decodeURIComponent(params.type);

// Get URL parameters
const searchQuery = Astro.url.searchParams.get('search') || null;

// Filter entries based on search query (client-side filtering for search)
let displayEntries = page.data;
if (searchQuery) {
  const searchTerm = searchQuery.toLowerCase();
  displayEntries = page.data.filter((entry: ResourceEntry) => {
    const data = entry.data;
    const name = data.Name || '';
    const summary = data['AI summary'] || '';
    return name.toLowerCase().includes(searchTerm) || summary.toLowerCase().includes(searchTerm);
  });
}

// Update pagination info for search results
const totalEntries = searchQuery ? displayEntries.length : page.total;
const totalPages = Math.max(1, Math.ceil(totalEntries / page.size));

// Parse and sanitize currentPage with fallback and bounds check
let p = parseInt(params.page, 10);
if (Number.isNaN(p)) p = 1;
const currentPage = Math.min(Math.max(1, p), totalPages);

// Generate title
const title = 'RR Resources';
const pageTitle = `${title}: ${decodedCategory} - ${decodedType} (Page ${currentPage} of ${totalPages})`;

// SEO metadata
const seoTitle = searchQuery
  ? `${title}: ${decodedCategory} - ${decodedType} - "${searchQuery}" - Page ${currentPage}`
  : pageTitle;
const seoDescription = `Resources in the ${decodedCategory} category of type ${decodedType}. ${page.total} resources found.`;
---

<Layout
  metadata={{
    title: seoTitle,
    description: seoDescription,
    canonical: Astro.url.href,
  }}
>
  <div class="mx-auto max-w-7xl px-6 py-8 md:px-8">
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="leading-tighter text-3xl font-bold tracking-tighter md:text-4xl">
            {title}: {decodedCategory} - {decodedType}
            {searchQuery && <span class="text-primary">: "{searchQuery}"</span>}
            <span class="text-muted-foreground text-lg font-normal">(Page {currentPage} of {totalPages})</span>
          </h1>
          <p class="text-muted-foreground mt-2">
            {page.total} resources in the {decodedCategory} category of type {decodedType}
          </p>
        </div>
        <RrFilterSheet
          categories={allCategories}
          types={allTypes}
          selectedCategory={decodedCategory || undefined}
          selectedType={decodedType || undefined}
        />
      </div>
    </div>

    {/* Search*/}
    <div class="mb-8">
      <RrSearch />
    </div>

    {/* Search Results or Content*/}
    {
      displayEntries.length > 0 ? (
        <div>
          <ResourceGrid entries={displayEntries} />

          {/* Pagination*/}
          <div class="mt-8">
            <Pagination
              currentPage={currentPage}
              lastPage={totalPages}
              prevUrl={page.url.prev}
              nextUrl={page.url.next}
              firstUrl={page.url.first}
              lastUrl={page.url.last}
              baseUrl={`/resources/category/${encodeURIComponent(decodedCategory)}/type/${encodeURIComponent(decodedType)}`}
              queryParams={Astro.url.searchParams}
            />
          </div>
        </div>
      ) : (
        <div class="py-16 text-center">
          <div class="mx-auto max-w-md">
            <div class="mb-6">
              <div class="bg-muted mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full">
                <svg class="text-muted-foreground h-8 w-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </div>
              <h2 class="text-foreground mb-2 text-2xl font-semibold">
                {searchQuery ? 'No search results found' : 'No resources in this combination'}
              </h2>
              <p class="text-muted-foreground mb-6">
                {searchQuery
                  ? `We couldn't find any resources matching "${searchQuery}" in ${decodedCategory} - ${decodedType}.`
                  : `We don't have any resources in the ${decodedCategory} category of type ${decodedType} yet.`}
              </p>
            </div>

            <div class="space-y-4">
              <div class="flex flex-col justify-center gap-3 sm:flex-row">
                <a
                  href={`/resources/category/${encodeURIComponent(decodedCategory)}/1`}
                  class="bg-primary text-primary-foreground hover:bg-primary/90 inline-flex items-center justify-center rounded-md px-4 py-2 transition-colors"
                >
                  View all {decodedCategory} resources
                </a>
                <a
                  href={`/resources/type/${encodeURIComponent(decodedType)}/1`}
                  class="bg-secondary text-secondary-foreground hover:bg-secondary/90 inline-flex items-center justify-center rounded-md px-4 py-2 transition-colors"
                >
                  View all {decodedType} resources
                </a>
              </div>

              <div class="border-border border-t pt-4">
                <p class="text-muted-foreground mb-3 text-sm">Or explore our full collection:</p>
                <a
                  href="/resources/all/1"
                  class="text-primary hover:text-primary/80 inline-flex items-center transition-colors"
                >
                  <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
                    />
                  </svg>
                  Browse all resources
                </a>
              </div>
            </div>
          </div>
        </div>
      )
    }
  </div>
</Layout>
