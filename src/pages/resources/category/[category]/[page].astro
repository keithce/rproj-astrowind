---
import Layout from '~/layouts/PageLayout.astro';
import RrSearch from '~/components/resources/ResourceSearch.astro';
import RrFilterSheet from '~/components/resources/ResourceFilterSheet.astro';
import ResourceGrid from '~/components/resources/ResourceGrid.astro';
import Pagination from '~/components/common/Pagination.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import { findResourceCategories, findResourceTypes } from '~/utils/resources';

type ResourceEntry = CollectionEntry<'resources'>;

export const prerender = true;

export async function getStaticPaths({
  paginate,
}: {
  paginate: (data: ResourceEntry[], options: { params: Record<string, string>; pageSize: number }) => unknown[];
}) {
  const allEntries = await getCollection('resources');
  const allCategories = await findResourceCategories();

  // For every category, return a `paginate()` result.
  // Make sure that you pass `{ params: { category }}` to `paginate()`
  // so that Astro knows which category grouping the result is for.
  return allCategories.flatMap(category => {
    const filteredEntries = allEntries.filter((entry: ResourceEntry) => {
      const data = entry.data;
      const entryCategories = data.Category;
      return Array.isArray(entryCategories) ? entryCategories.includes(category) : entryCategories === category;
    });

    // Always generate paths, even for empty results
    if (filteredEntries.length > 0) {
      return paginate(filteredEntries, {
        params: { category },
        pageSize: 12,
      });
    } else {
      // Generate a single page for empty results
      return [
        {
          params: { category, page: '1' },
          props: {
            page: {
              data: [],
              url: {
                current: 1,
                prev: undefined,
                next: undefined,
                first: undefined,
                last: undefined,
              },
              size: 12,
              total: 0,
            },
          },
        },
      ];
    }
  });
}

const { page } = Astro.props as {
  page: {
    data: ResourceEntry[];
    total: number;
    size: number;
    url: { prev?: string; next?: string; first?: string; last?: string };
  };
};
const params = Astro.params as { category: string; page: string };

// Get the category and type information
const allCategories = await findResourceCategories();
const allTypes = await findResourceTypes();
const decodedCategory = decodeURIComponent(params.category);

// Get URL parameters
const searchQuery = Astro.url.searchParams.get('search') || null;

// Filter entries based on search query (client-side filtering for search)
let displayEntries = page.data;
if (searchQuery) {
  const searchTerm = searchQuery.toLowerCase();
  displayEntries = page.data.filter((entry: ResourceEntry) => {
    const data = entry.data;
    const name = data.Name || '';
    const summary = data['AI summary'] || '';
    return name.toLowerCase().includes(searchTerm) || summary.toLowerCase().includes(searchTerm);
  });
}

// Update pagination info for search results
const totalEntries = searchQuery ? displayEntries.length : page.total;
const totalPages = Math.ceil(totalEntries / page.size);
const currentPage = parseInt(params.page);

// Generate title
const title = 'RR Resources';
const pageTitle = `${title}: ${decodedCategory} (Page ${currentPage} of ${totalPages})`;

// SEO metadata
const seoTitle = searchQuery ? `${title}: ${decodedCategory} - "${searchQuery}" - Page ${currentPage}` : pageTitle;
const seoDescription = `Resources in the ${decodedCategory} category. ${page.total} resources found.`;
---

<Layout
  metadata={{
    title: seoTitle,
    description: seoDescription,
    canonical: Astro.url.href,
  }}
>
  <div class="px-6 py-8 mx-auto max-w-7xl md:px-8">
    <div class="mb-8">
      <div class="flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold tracking-tighter leading-tighter md:text-4xl">
            {title}: {decodedCategory}
            {searchQuery && <span class="text-primary">: "{searchQuery}"</span>}
            <span class="text-lg font-normal text-muted-foreground">(Page {currentPage} of {totalPages})</span>
          </h1>
          <p class="mt-2 text-muted-foreground">
            {page.total} resources in the {decodedCategory} category
          </p>
        </div>
        <RrFilterSheet
          categories={allCategories}
          types={await findResourceTypes()}
          selectedCategory={decodedCategory || undefined}
          selectedType={undefined}
        />
      </div>
    </div>

    {/* Search*/}
    <div class="mb-8">
      <RrSearch />
    </div>

    {/* Search Results or Content*/}
    {
      displayEntries.length > 0 ? (
        <div>
          <ResourceGrid entries={displayEntries} />

          {/* Pagination*/}
          <div class="mt-8">
            <Pagination
              currentPage={currentPage}
              lastPage={totalPages}
              prevUrl={page.url.prev}
              nextUrl={page.url.next}
              firstUrl={page.url.first}
              lastUrl={page.url.last}
              baseUrl={`/resources/category/${encodeURIComponent(decodedCategory)}`}
              queryParams={Astro.url.searchParams}
            />
          </div>
        </div>
      ) : (
        <div class="py-16 text-center">
          <div class="mx-auto max-w-md">
            <div class="mb-6">
              <div class="flex justify-center items-center mx-auto mb-4 w-16 h-16 rounded-full bg-muted">
                <svg class="w-8 h-8 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </div>
              <h2 class="mb-2 text-2xl font-semibold text-foreground">
                {searchQuery ? 'No search results found' : `No resources in ${decodedCategory} yet`}
              </h2>
              <p class="mb-6 text-muted-foreground">
                {searchQuery
                  ? `We couldn't find any resources matching "${searchQuery}" in the ${decodedCategory} category.`
                  : `We don't have any resources in the ${decodedCategory} category yet, but we're always adding new content.`}
              </p>
            </div>

            <div class="space-y-4">
              <a
                href="/resources/all/1"
                class="inline-flex justify-center items-center px-6 py-3 rounded-md transition-colors bg-primary text-primary-foreground hover:bg-primary/90"
              >
                <svg class="mr-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
                  />
                </svg>
                Browse all resources
              </a>

              <div class="pt-4 border-t border-border">
                <p class="mb-3 text-sm text-muted-foreground">Or explore by type:</p>
                <div class="flex flex-wrap gap-2 justify-center">
                  {allTypes.slice(0, 4).map((type: string) => (
                    <a
                      href={`/resources/type/${encodeURIComponent(type)}/1`}
                      class="inline-flex items-center px-3 py-1 text-sm rounded-full transition-colors bg-secondary text-secondary-foreground hover:bg-secondary/80"
                    >
                      {type}
                    </a>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      )
    }
  </div>
</Layout>
