---
import Layout from '~/layouts/PageLayout.astro';
import RrSearch from '~/components/resources/ResourceSearch.astro';
import RrFilterSheet from '~/components/resources/ResourceFilterSheet.astro';
import ResourceGrid from '~/components/resources/ResourceGrid.astro';
import Pagination from '~/components/common/Pagination.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import { findResourceCategories, findResourceTypes } from '~/utils/resources';

type ResourceEntry = CollectionEntry<'resources'>;

export const prerender = true;

export async function getStaticPaths({
  paginate,
}: {
  paginate: (data: ResourceEntry[], options: { params: Record<string, string>; pageSize: number }) => unknown[];
}) {
  const allEntries = await getCollection('resources');

  // Generate paginated routes for all entries
  return paginate(allEntries, {
    params: { filter: 'all' },
    pageSize: 12,
  });
}

// Get all entries for client-side search filtering
const allEntries = await getCollection('resources');

const { page } = Astro.props as {
  page: {
    data: ResourceEntry[];
    total: number;
    size: number;
    url: { prev?: string; next?: string; first?: string; last?: string };
  };
};
const params = Astro.params as { filter: string; page: string };

// Get URL parameters
const searchQuery = Astro.url.searchParams.get('search') || null;

// Filter entries based on search query (client-side filtering for search)
let displayEntries = page.data;
let totalEntries = page.total;
let totalPages = Math.ceil(totalEntries / page.size);
let currentPage = parseInt(params.page);

// Handle search filtering across all entries
if (searchQuery) {
  const searchTerm = searchQuery.toLowerCase();
  displayEntries = allEntries.filter((entry: ResourceEntry) => {
    const data = entry.data;
    const name = data.Name || '';
    const summary = data['AI summary'] || '';
    return name.toLowerCase().includes(searchTerm) || summary.toLowerCase().includes(searchTerm);
  });

  // When search is active, disable pagination and show all results on one "page"
  totalEntries = displayEntries.length;
  totalPages = 1;
  currentPage = 1;
}

// Generate title
const title = 'RR Resources';
const pageTitle = `${title} (Page ${currentPage} of ${totalPages})`;

// SEO metadata
const seoTitle = searchQuery ? `${title}: "${searchQuery}" - Page ${currentPage}` : pageTitle;
const seoDescription = `All RR Resources. ${page.total} resources found.`;

// Load filter data
const categories = await findResourceCategories();
const types = await findResourceTypes();
---

<Layout
  metadata={{
    title: seoTitle,
    description: seoDescription,
    canonical: Astro.url.href,
  }}
>
  <div class="mx-auto max-w-7xl px-6 py-8 md:px-8">
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <h1 class="leading-tighter text-3xl font-bold tracking-tighter md:text-4xl">
          {title}
          {searchQuery && <span class="text-primary">: "{searchQuery}"</span>}
          <span class="text-muted-foreground text-lg font-normal">(Page {currentPage} of {totalPages})</span>
        </h1>
        <RrFilterSheet categories={categories} types={types} />
      </div>
    </div>

    {/* Search*/}
    <div class="mb-8">
      <RrSearch />
    </div>

    {/* Search Results or Content*/}
    {
      displayEntries.length > 0 ? (
        <div>
          <ResourceGrid entries={displayEntries} />

          {/* Pagination - disabled when search is active */}
          <div class="mt-8">
            {searchQuery ? (
              <div class="text-muted-foreground text-center text-sm">
                Showing all {totalEntries} results for "{searchQuery}"
              </div>
            ) : (
              <Pagination
                currentPage={currentPage}
                lastPage={totalPages}
                prevUrl={page.url.prev}
                nextUrl={page.url.next}
                firstUrl={page.url.first}
                lastUrl={page.url.last}
                baseUrl="/resources/all"
                queryParams={Astro.url.searchParams}
              />
            )}
          </div>
        </div>
      ) : (
        <div class="py-12 text-center">
          <h2 class="text-muted-foreground mb-2 text-xl font-semibold">
            {searchQuery ? 'No search results found' : 'No resources found'}
          </h2>
          <p class="text-muted-foreground mb-4">
            {searchQuery ? `Try searching for something else or browse all resources.` : `No resources available.`}
          </p>
        </div>
      )
    }
  </div>
</Layout>
