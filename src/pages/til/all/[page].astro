---
import Layout from '~/layouts/PageLayout.astro';
import TilFilterSheet from '~/components/til/TilFilterSheet.astro';
import TilViewToggle from '~/components/til/TilViewToggle.astro';
import TilSocialFeed from '~/components/til/TilSocialFeed.astro';
import TilKanbanView from '~/components/til/TilKanbanView.astro';
import Pagination from '~/components/common/Pagination.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import { findTilTags } from '~/utils/til';

type TilEntry = CollectionEntry<'til'>;

export const prerender = true;

export async function getStaticPaths({
  paginate,
}: {
  paginate: (data: TilEntry[], options: { params: Record<string, string>; pageSize: number }) => unknown[];
}) {
  const allEntries = await getCollection('til');

  // Generate paginated routes for all entries
  return paginate(allEntries, {
    params: { tag: 'all' },
    pageSize: 10,
  });
}

const { page } = Astro.props as {
  page: {
    data: TilEntry[];
    total: number;
    size: number;
    url: { prev?: string; next?: string; first?: string; last?: string };
  };
};
const params = Astro.params as { tag: string; page: string };

// Get URL parameters
const searchQuery = Astro.url.searchParams.get('search') || null;
const viewParam = Astro.url.searchParams.get('view') || 'feed';

// Filter entries based on search query (client-side filtering for search)
let displayEntries = page.data;
if (searchQuery) {
  const searchTerm = searchQuery.toLowerCase();
  displayEntries = page.data.filter((entry: TilEntry) => {
    const data = entry.data;
    const title = data.title || '';
    const summary = data.description || '';
    return title.toLowerCase().includes(searchTerm) || summary.toLowerCase().includes(searchTerm);
  });
}

// Update pagination info for search results
const totalEntries = searchQuery ? displayEntries.length : page.total;
const totalPages = Math.ceil(totalEntries / page.size);
const currentPage = parseInt(params.page);

// Generate title
const title = 'Today I Learned';
// const pageTitle = `${title} (Page ${currentPage} of ${totalPages})`;

// SEO metadata - currently unused but kept for future use
// const seoTitle = searchQuery ? `${title}: "${searchQuery}" - Page ${currentPage}` : pageTitle;
// const seoDescription = `Today I Learned entries. ${page.total} entries found.`;
---

<Layout>
  <div class="mx-auto max-w-7xl px-6 py-8 md:px-8">
    <div class="mb-8">
      <h1 class="leading-tighter mb-4 text-3xl font-bold tracking-tighter md:mb-0 md:text-4xl">
        {title}
        {searchQuery && <span class="text-primary">: "{searchQuery}"</span>}
        <span class="text-muted-foreground text-lg font-normal">(Page {currentPage} of {totalPages})</span>
      </h1>
    </div>

    {/* Filters and View Toggle*/}
    <div class="mb-8 flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
      <TilFilterSheet tags={await findTilTags()} selectedTag={undefined} />
      <TilViewToggle currentView={viewParam as 'feed' | 'kanban'} />
    </div>

    {/* Search Results or Content*/}
    {
      displayEntries.length > 0 ? (
        <div>
          {viewParam === 'feed' ? (
            <TilSocialFeed entries={displayEntries} />
          ) : (
            <TilKanbanView entries={displayEntries} />
          )}

          {/* Pagination*/}
          <div class="mt-8">
            <Pagination
              currentPage={currentPage}
              lastPage={totalPages}
              prevUrl={page.url.prev}
              nextUrl={page.url.next}
              firstUrl={page.url.first}
              lastUrl={page.url.last}
              baseUrl="/til/all"
              queryParams={Astro.url.searchParams}
            />
          </div>
        </div>
      ) : (
        <div class="py-12 text-center">
          <h2 class="text-muted-foreground mb-2 text-xl font-semibold">
            {searchQuery ? 'No search results found' : 'No entries found'}
          </h2>
          <p class="text-muted-foreground mb-4">
            {searchQuery ? `Try searching for something else or browse all entries.` : `No entries available.`}
          </p>
        </div>
      )
    }
  </div>
</Layout>
