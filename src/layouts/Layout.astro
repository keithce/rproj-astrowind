---
import '~/assets/styles/starwind.css';
import '~/assets/styles/tailwind.css';

import { I18N } from 'astrowind:config';

import CommonMeta from '~/components/common/CommonMeta.astro';
import Favicons from '~/components/Favicons.astro';
import CustomStyles from '~/components/CustomStyles.astro';
import Metadata from '~/components/common/Metadata.astro';
import SiteVerification from '~/components/common/SiteVerification.astro';
import Analytics from '~/components/common/Analytics.astro';
import BasicScripts from '~/components/common/BasicScripts.astro';
// import { BotIdClient } from 'botid/client';

// Comment the line below to disable View Transitions
import { ClientRouter } from 'astro:transitions';

import type { MetaData as MetaDataType } from '~/types';

export interface Props {
  metadata?: MetaDataType;
}

const { metadata = {} } = Astro.props;
const { language, textDirection } = I18N;

// const protectedRoutes = [
//   {
//     path: '/api/submit-to-notion',
//     method: 'POST',
//   },
//   {
//     path: '/api/response-test',
//     method: 'POST',
//   },
// ];
---

<!doctype html>
<html lang={language} dir={textDirection} class="2xl:text-[20px]">
  <head>
    <CommonMeta />
    <Favicons />
    <CustomStyles />
    <Metadata {...metadata} />
    <SiteVerification />
    <Analytics />
    <!-- <BotIdClient protect={protectedRoutes} /> -->

    <!-- Comment the line below to disable View Transitions -->
    <ClientRouter fallback="swap" />
  </head>

  <body class="text-default bg-page tracking-tight antialiased">
    <!-- Skip Links for Keyboard Navigation -->
    <div class="skip-links">
      <a href="#main-content" class="skip-link">Skip to main content</a>
      <a href="#navigation" class="skip-link">Skip to navigation</a>
      <a href="#footer" class="skip-link">Skip to footer</a>
      <a href="#search" class="skip-link">Skip to search</a>
    </div>

    <!-- Focus Management Container -->
    <div id="focus-trap-container" role="main">
      <slot />
    </div>

    <BasicScripts />

    <!-- Focus Management Script -->
    <script is:inline>
      // Focus Management and Skip Links Enhancement
      class FocusManager {
        constructor() {
          this.lastFocusedElement = null;
          this.focusableSelectors = [
            'a[href]',
            'button:not([disabled])',
            'input:not([disabled])',
            'select:not([disabled])',
            'textarea:not([disabled])',
            '[tabindex]:not([tabindex="-1"])',
            'details > summary',
            '[contenteditable]',
          ].join(', ');

          this.init();
        }

        init() {
          this.setupSkipLinks();
          this.setupFocusTrapping();
          this.setupKeyboardNavigation();
          this.setupFocusIndicators();
          this.setupModalFocusManagement();

          // Advanced focus management features
          this.handleNestedInteractives();
          this.setupAdvancedModalManagement();
          this.setupAdvancedKeyboardNavigation();
          this.setupDynamicContentFocus();
          this.setupFocusDebugging();
        }

        /**
         * Setup skip links with smooth scrolling and focus management
         */
        setupSkipLinks() {
          const skipLinks = document.querySelectorAll('.skip-link');

          skipLinks.forEach(link => {
            link.addEventListener('click', e => {
              e.preventDefault();
              const targetId = link.getAttribute('href').substring(1);
              const targetElement = document.getElementById(targetId);

              if (targetElement) {
                // Smooth scroll to target
                targetElement.scrollIntoView({
                  behavior: 'smooth',
                  block: 'start',
                });

                // Set focus to target element
                this.setFocusToElement(targetElement);

                // Announce to screen readers
                this.announceSkipAction(targetElement);
              }
            });
          });
        }

        /**
         * Set focus to an element, making it focusable if necessary
         */
        setFocusToElement(element) {
          // Store original tabindex
          const originalTabIndex = element.getAttribute('tabindex');

          // Make element focusable if it's not already
          if (!element.matches(this.focusableSelectors)) {
            element.setAttribute('tabindex', '-1');
          }

          // Focus the element
          element.focus();

          // Add visual focus indicator
          element.classList.add('skip-target-focused');

          // Remove temporary tabindex after focus
          setTimeout(() => {
            if (originalTabIndex === null && element.getAttribute('tabindex') === '-1') {
              element.removeAttribute('tabindex');
            }
            element.classList.remove('skip-target-focused');
          }, 3000);
        }

        /**
         * Announce skip action to screen readers
         */
        announceSkipAction(targetElement) {
          const announcement = document.createElement('div');
          announcement.setAttribute('aria-live', 'polite');
          announcement.setAttribute('aria-atomic', 'true');
          announcement.className = 'sr-only';

          const targetName =
            targetElement.getAttribute('aria-label') ||
            targetElement.textContent.trim().substring(0, 50) ||
            'content section';

          announcement.textContent = `Skipped to ${targetName}`;
          document.body.appendChild(announcement);

          // Remove announcement after it's been read
          setTimeout(() => {
            document.body.removeChild(announcement);
          }, 2000);
        }

        /**
         * Setup focus trapping for modals and interactive elements
         */
        setupFocusTrapping() {
          // Monitor for modal/dialog openings
          document.addEventListener('keydown', e => {
            if (e.key === 'Tab') {
              const activeModal = document.querySelector('[role="dialog"][aria-hidden="false"]');
              if (activeModal) {
                this.trapFocusInModal(e, activeModal);
              }
            }
          });
        }

        /**
         * Trap focus within a modal
         */
        trapFocusInModal(e, modal) {
          const focusableElements = modal.querySelectorAll(this.focusableSelectors);
          const firstFocusable = focusableElements[0];
          const lastFocusable = focusableElements[focusableElements.length - 1];

          if (e.shiftKey) {
            // Shift + Tab
            if (document.activeElement === firstFocusable) {
              e.preventDefault();
              lastFocusable.focus();
            }
          } else {
            // Tab
            if (document.activeElement === lastFocusable) {
              e.preventDefault();
              firstFocusable.focus();
            }
          }
        }

        /**
         * Setup enhanced keyboard navigation
         */
        setupKeyboardNavigation() {
          // Escape key handling for modals and dropdowns
          document.addEventListener('keydown', e => {
            if (e.key === 'Escape') {
              this.handleEscapeKey();
            }
          });

          // Arrow key navigation for menus
          document.addEventListener('keydown', e => {
            if (['ArrowUp', 'ArrowDown'].includes(e.key)) {
              const currentMenu = e.target.closest('[role="menu"], [role="menubar"]');
              if (currentMenu) {
                this.handleMenuNavigation(e, currentMenu);
              }
            }
          });
        }

        /**
         * Handle escape key for closing modals and dropdowns
         */
        handleEscapeKey() {
          // Close open modals
          const openModal = document.querySelector('[role="dialog"][aria-hidden="false"]');
          if (openModal) {
            this.closeModal(openModal);
            return;
          }

          // Close open dropdowns
          const openDropdown = document.querySelector('[aria-expanded="true"]');
          if (openDropdown) {
            openDropdown.setAttribute('aria-expanded', 'false');
            openDropdown.focus();
          }
        }

        /**
         * Handle arrow key navigation in menus
         */
        handleMenuNavigation(e, menu) {
          e.preventDefault();
          const menuItems = menu.querySelectorAll('[role="menuitem"], a, button');
          const currentIndex = Array.from(menuItems).indexOf(document.activeElement);

          let nextIndex;
          if (e.key === 'ArrowDown') {
            nextIndex = currentIndex + 1;
            if (nextIndex >= menuItems.length) nextIndex = 0;
          } else {
            nextIndex = currentIndex - 1;
            if (nextIndex < 0) nextIndex = menuItems.length - 1;
          }

          menuItems[nextIndex].focus();
        }

        /**
         * Setup enhanced focus indicators
         */
        setupFocusIndicators() {
          // Track focus method (mouse vs keyboard)
          let isUsingKeyboard = false;

          document.addEventListener('keydown', e => {
            if (e.key === 'Tab') {
              isUsingKeyboard = true;
              document.body.classList.add('keyboard-navigation');
            }
          });

          document.addEventListener('mousedown', () => {
            isUsingKeyboard = false;
            document.body.classList.remove('keyboard-navigation');
          });

          // Enhanced focus visibility
          document.addEventListener('focusin', e => {
            if (isUsingKeyboard) {
              e.target.classList.add('keyboard-focused');
            }
          });

          document.addEventListener('focusout', e => {
            e.target.classList.remove('keyboard-focused');
          });
        }

        /**
         * Setup modal focus management
         */
        setupModalFocusManagement() {
          // Store focus when modal opens
          document.addEventListener('modal:open', e => {
            this.lastFocusedElement = document.activeElement;
            const modal = e.detail?.modal;

            // Focus first focusable element in modal
            setTimeout(() => {
              const firstFocusable = modal.querySelector(this.focusableSelectors);
              if (firstFocusable) {
                firstFocusable.focus();
              }
            }, 100);
          });

          // Restore focus when modal closes
          document.addEventListener('modal:close', () => {
            if (this.lastFocusedElement) {
              this.lastFocusedElement.focus();
              this.lastFocusedElement = null;
            }
          });
        }

        /**
         * Close modal and restore focus
         */
        closeModal(modal) {
          modal.setAttribute('aria-hidden', 'true');

          // Dispatch close event
          const closeEvent = new CustomEvent('modal:close', {
            detail: { modal },
          });
          document.dispatchEvent(closeEvent);
        }

        /**
         * Get all focusable elements in a container
         */
        getFocusableElements(container = document) {
          return container.querySelectorAll(this.focusableSelectors);
        }

        /**
         * Focus the first element in a container
         */
        focusFirstElement(container) {
          const firstFocusable = container.querySelector(this.focusableSelectors);
          if (firstFocusable) {
            firstFocusable.focus();
          }
        }

        /**
         * Focus management for single-page app navigation
         */
        handlePageNavigation(newPageTitle) {
          // Announce page change to screen readers
          const announcement = document.createElement('div');
          announcement.setAttribute('aria-live', 'polite');
          announcement.setAttribute('aria-atomic', 'true');
          announcement.className = 'sr-only';
          announcement.textContent = `Navigated to ${newPageTitle}`;

          document.body.appendChild(announcement);

          // Note: Removed auto-focus of main content to prevent disruptive visual overlay
          // The main content will still be accessible via skip links if needed

          // Clean up announcement
          setTimeout(() => {
            if (document.body.contains(announcement)) {
              document.body.removeChild(announcement);
            }
          }, 2000);
        }

        /**
         * Advanced Focus Management Features
         */

        /**
         * Handle nested interactive elements focus management
         */
        handleNestedInteractives() {
          document.addEventListener('focusin', e => {
            const target = e.target;
            const nestedContainer = target.closest('[data-nested-interactive]');

            if (nestedContainer) {
              this.manageNestedFocus(target, nestedContainer);
            }
          });
        }

        /**
         * Manage focus within nested interactive containers
         */
        manageNestedFocus(target, container) {
          // Store the active nested container
          container.setAttribute('data-active-nested', 'true');

          // Clear other active nested containers
          document.querySelectorAll('[data-nested-interactive][data-active-nested="true"]').forEach(el => {
            if (el !== container) {
              el.removeAttribute('data-active-nested');
            }
          });
        }

        /**
         * Enhanced modal focus management with stacking support
         */
        setupAdvancedModalManagement() {
          this.modalStack = [];

          // Enhanced modal open handler
          document.addEventListener('modal:open', e => {
            const modal = e.detail?.modal;
            if (!modal) return;

            // Add to modal stack
            this.modalStack.push({
              modal,
              previousFocus: document.activeElement,
              previousAriaHidden: this.getAriaHiddenElements(),
            });

            // Hide other content from screen readers
            this.hideContentFromScreenReaders(modal);

            // Set up focus trap
            this.setupModalFocusTrap(modal);

            // Focus first element
            setTimeout(() => {
              this.focusFirstInModal(modal);
            }, 100);
          });

          // Enhanced modal close handler
          document.addEventListener('modal:close', e => {
            const modal = e.detail?.modal;
            if (!modal || this.modalStack.length === 0) return;

            // Find and remove modal from stack
            const modalIndex = this.modalStack.findIndex(item => item.modal === modal);
            if (modalIndex === -1) return;

            const modalData = this.modalStack[modalIndex];
            this.modalStack.splice(modalIndex, 1);

            // Restore aria-hidden states
            this.restoreAriaHiddenElements(modalData.previousAriaHidden);

            // Restore focus
            if (modalData.previousFocus && modalData.previousFocus.focus) {
              modalData.previousFocus.focus();
            }

            // If there are other modals, focus the top one
            if (this.modalStack.length > 0) {
              const topModal = this.modalStack[this.modalStack.length - 1];
              this.focusFirstInModal(topModal.modal);
            }
          });
        }

        /**
         * Hide content from screen readers when modal is open
         */
        hideContentFromScreenReaders(activeModal) {
          const elementsToHide = document.querySelectorAll('body > *:not(.sr-only)');
          elementsToHide.forEach(el => {
            if (!el.contains(activeModal) && !el.hasAttribute('aria-hidden')) {
              el.setAttribute('aria-hidden', 'true');
              el.setAttribute('data-modal-hidden', 'true');
            }
          });
        }

        /**
         * Get currently aria-hidden elements
         */
        getAriaHiddenElements() {
          return Array.from(document.querySelectorAll('[aria-hidden="true"]')).map(el => ({
            element: el,
            wasHidden: !el.hasAttribute('data-modal-hidden'),
          }));
        }

        /**
         * Restore aria-hidden states
         */
        restoreAriaHiddenElements(_previousStates) {
          // Remove modal-added aria-hidden
          document.querySelectorAll('[data-modal-hidden="true"]').forEach(el => {
            el.removeAttribute('aria-hidden');
            el.removeAttribute('data-modal-hidden');
          });
        }

        /**
         * Setup focus trap for modal
         */
        setupModalFocusTrap(modal) {
          const focusableElements = this.getFocusableElements(modal);

          if (focusableElements.length === 0) {
            // Make modal itself focusable if no focusable children
            modal.setAttribute('tabindex', '-1');
          }

          // Store focusable elements on modal for reference
          modal._focusableElements = focusableElements;
        }

        /**
         * Focus first element in modal
         */
        focusFirstInModal(modal) {
          const focusableElements = modal._focusableElements || this.getFocusableElements(modal);

          if (focusableElements.length > 0) {
            focusableElements[0].focus();
          } else {
            modal.focus();
          }
        }

        /**
         * Enhanced keyboard navigation for complex components
         */
        setupAdvancedKeyboardNavigation() {
          // Handle complex component navigation
          document.addEventListener('keydown', e => {
            const target = e.target;
            const complexComponent = target.closest('[data-complex-navigation]');

            if (complexComponent) {
              this.handleComplexNavigation(e, complexComponent);
            }
          });

          // Handle roving tabindex pattern
          this.setupRovingTabindex();
        }

        /**
         * Handle navigation in complex components
         */
        handleComplexNavigation(e, component) {
          const navigationType = component.getAttribute('data-complex-navigation');

          switch (navigationType) {
            case 'grid':
              this.handleGridNavigation(e, component);
              break;
            case 'tree':
              this.handleTreeNavigation(e, component);
              break;
            case 'tab-list':
              this.handleTabListNavigation(e, component);
              break;
          }
        }

        /**
         * Handle grid navigation (arrow keys in 2D)
         */
        handleGridNavigation(e, grid) {
          if (!['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) return;

          e.preventDefault();

          const cells = Array.from(grid.querySelectorAll('[role="gridcell"], [data-grid-cell]'));
          const currentIndex = cells.indexOf(e.target);
          const columns = parseInt(grid.getAttribute('data-grid-columns') || '1');

          let nextIndex;
          switch (e.key) {
            case 'ArrowRight':
              nextIndex = currentIndex + 1;
              break;
            case 'ArrowLeft':
              nextIndex = currentIndex - 1;
              break;
            case 'ArrowDown':
              nextIndex = currentIndex + columns;
              break;
            case 'ArrowUp':
              nextIndex = currentIndex - columns;
              break;
          }

          if (nextIndex >= 0 && nextIndex < cells.length) {
            cells[nextIndex].focus();
          }
        }

        /**
         * Setup roving tabindex pattern
         */
        setupRovingTabindex() {
          document.addEventListener('focusin', e => {
            const target = e.target;
            const rovingContainer = target.closest('[data-roving-tabindex]');

            if (rovingContainer) {
              this.updateRovingTabindex(rovingContainer, target);
            }
          });
        }

        /**
         * Update roving tabindex
         */
        updateRovingTabindex(container, activeElement) {
          const items = container.querySelectorAll('[data-roving-item]');

          items.forEach(item => {
            if (item === activeElement) {
              item.setAttribute('tabindex', '0');
            } else {
              item.setAttribute('tabindex', '-1');
            }
          });
        }

        /**
         * Dynamic content focus management
         */
        setupDynamicContentFocus() {
          // Watch for dynamic content insertion
          const observer = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
              if (mutation.type === 'childList') {
                mutation.addedNodes.forEach(node => {
                  if (node.nodeType === Node.ELEMENT_NODE) {
                    this.handleDynamicContentAdded(node);
                  }
                });
              }
            });
          });

          observer.observe(document.body, {
            childList: true,
            subtree: true,
          });
        }

        /**
         * Handle dynamically added content
         */
        handleDynamicContentAdded(element) {
          // If element requests focus
          if (element.hasAttribute('data-auto-focus')) {
            setTimeout(() => {
              const focusTarget = element.querySelector('[data-focus-target]') || element;
              if (focusTarget.focus) {
                focusTarget.focus();

                // Announce content addition
                this.announceDynamicContent(element);
              }
            }, 100);
          }

          // Setup any new interactive components
          this.initializeNewInteractiveElements(element);
        }

        /**
         * Announce dynamic content to screen readers
         */
        announceDynamicContent(element) {
          const announcement = element.getAttribute('data-announce') || 'New content added';

          const liveRegion = document.createElement('div');
          liveRegion.setAttribute('aria-live', 'polite');
          liveRegion.className = 'sr-only';
          liveRegion.textContent = announcement;

          document.body.appendChild(liveRegion);

          setTimeout(() => {
            document.body.removeChild(liveRegion);
          }, 2000);
        }

        /**
         * Initialize new interactive elements
         */
        initializeNewInteractiveElements(container) {
          // Setup any new roving tabindex containers
          const rovingContainers = container.querySelectorAll('[data-roving-tabindex]');
          rovingContainers.forEach(container => {
            const firstItem = container.querySelector('[data-roving-item]');
            if (firstItem) {
              firstItem.setAttribute('tabindex', '0');
            }
          });

          // Setup any new complex navigation components
          const complexComponents = container.querySelectorAll('[data-complex-navigation]');
          complexComponents.forEach(_component => {
            // Initialize component-specific setup
          });
        }

        /**
         * Focus debugging and monitoring
         */
        setupFocusDebugging() {
          if (window.location.search.includes('debug-focus')) {
            document.addEventListener('focusin', e => {
              // Visual focus tracing (disabled console output to satisfy lint)
              e.target.style.outline = '3px solid red';
            });

            document.addEventListener('focusout', e => {
              e.target.style.outline = '';
            });
          }
        }
      }

      // Initialize focus manager when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          window.focusManager = new FocusManager();
        });
      } else {
        window.focusManager = new FocusManager();
      }

      // Handle page navigation for SPA-like behavior
      document.addEventListener('astro:page-load', () => {
        const pageTitle = document.title;
        if (window.focusManager) {
          window.focusManager.handlePageNavigation(pageTitle);
        }
      });
    </script>
  </body>
</html>
