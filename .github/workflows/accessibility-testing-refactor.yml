name: '🛡️ Accessibility Testing (Refactored)'

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *' # daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

# ------------------------------------------------------------------
# Shared env values
# ------------------------------------------------------------------
env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10'
  DEV_PORT: 4321 # change once – propagates everywhere

# ------------------------------------------------------------------
# Jobs
# ------------------------------------------------------------------
jobs:
  # ================================================================
  # 1) Build the site once to fail fast on build-time errors
  # ================================================================
  build-site:
    name: '🏗️ Build & sanity-check'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: '📥 Checkout repository'
        uses: actions/checkout@v4

      - name: '📦 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: '📦 Install dependencies'
        run: pnpm install --frozen-lockfile

      - name: '🏗️ Build application'
        run: pnpm build

  # ================================================================
  # Re-usable shell snippet – start astro dev, wait, expose PID
  # ================================================================
  # Using YAML anchors for brevity
  #  _start_dev: &start_dev |
  #      pnpm astro dev --port ${{ env.DEV_PORT }} --host &
  #      echo "PID=$!" >> "$GITHUB_OUTPUT"
  #      for i in {1..30}; do
  #        sleep 2
  #        if curl -sf http://localhost:${{ env.DEV_PORT }} > /dev/null; then
  #          echo "✅ astro dev is up!"; break; fi
  #        echo "⏳ Waiting for dev server... ($i/30)";
  #        if [ $i -eq 30 ]; then echo "❌ Server did not start in time" >&2; exit 1; fi
  #      done
  #
  #  _stop_dev: &stop_dev |
  #      kill ${{ steps.dev.outputs.PID }} || true

  # ================================================================
  # 2) Accessibility matrix tests (axe, lighthouse, custom)
  # ================================================================
  accessibility-tests:
    name: '🧪 Accessibility Tests'
    needs: build-site
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        test-type: [axe-core, lighthouse, custom]

    steps:
      - name: '📥 Checkout repository'
        uses: actions/checkout@v4

      - name: '📦 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '📦 Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: '📦 Install dependencies (test libs)'
        run: pnpm install --frozen-lockfile

      - name: '🚀 Start astro dev'
        id: dev
        run: |
          pnpm astro dev --port ${{ env.DEV_PORT }} --host &
          echo "PID=$!" >> "$GITHUB_OUTPUT"
          for i in {1..30}; do
            sleep 2
            if curl -sf http://localhost:${{ env.DEV_PORT }} > /dev/null; then
              echo "✅ astro dev is up!"; break; fi
            echo "⏳ Waiting for dev server... ($i/30)";
            if [ $i -eq 30 ]; then echo "❌ Server did not start in time" >&2; exit 1; fi
          done

      - name: '🧪 Run Axe-Core Tests'
        if: matrix.test-type == 'axe-core'
        run: |
          # Install a Chrome + ChromeDriver pair that axe-core can use
          npx --yes browser-driver-manager@latest install chrome
          # Run the scans
          pnpm axe:scan
          pnpm test:accessibility:ci

      - name: '🧪 Run Lighthouse Tests'
        if: matrix.test-type == 'lighthouse'
        run: |
          mkdir -p accessibility-reports
          pnpm lighthouse:accessibility

      - name: '🧪 Run Custom Accessibility Tests'
        if: matrix.test-type == 'custom'
        run: pnpm test:accessibility:verbose

      - name: '📊 Upload Accessibility Reports'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-reports-${{ matrix.test-type }}
          path: |
            accessibility-reports/
            lighthouse-report.html
          retention-days: 30

      - name: '🛑 Stop dev server'
        if: always()
        run: |
          kill ${{ steps.dev.outputs.PID }} || true

      - name: '📝 Comment PR with Results'
        if: github.event_name == 'pull_request' && matrix.test-type == 'axe-core'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            let body = '## 🛡️ Accessibility Test Results\n\n';
            try {
              const files = fs.readdirSync('accessibility-reports');
              const summary = files.find(f => f.includes('summary'));
              if (summary) {
                body += '```\n' + fs.readFileSync(path.join('accessibility-reports', summary), 'utf8') + '\n```\n';
              }
              body += '\n📁 Full reports are available in the workflow artifacts.';
            } catch (err) {
              body += '❌ Unable to read accessibility report.';
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

  # ================================================================
  # 3) Accessibility Monitoring (no server needed)
  # ================================================================
  accessibility-monitoring:
    name: '📈 Accessibility Monitoring'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build-site, accessibility-tests]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - run: pnpm install --frozen-lockfile
      - name: '📊 Generate Accessibility Trends'
        run: |
          mkdir -p accessibility-trends
          echo "$(date): Accessibility tests completed" >> accessibility-trends/history.log
      - name: '📤 Upload Trends Data'
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-trends
          path: accessibility-trends/
          retention-days: 90
      - name: '🚨 Notify Slack on failure'
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#accessibility-alerts'
          text: '🚨 Accessibility tests failed on main branch'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ================================================================
  # 4) Security & Accessibility Scan (no server)
  # ================================================================
  security-accessibility-scan:
    name: '🔒 Security & Accessibility Scan'
    runs-on: ubuntu-latest
    needs: build-site

    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - uses: github/codeql-action/analyze@v3
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm install -g pnpm@${{ env.PNPM_VERSION }}
      - run: pnpm audit --audit-level moderate
      - name: '🧪 Accessibility Security Check'
        run: |
          echo "Checking for accessibility-related security vulnerabilities..."
          grep -r "aria-label.*innerHTML\|aria-describedby.*innerHTML" src/ || echo "No innerHTML in ARIA attributes found"
          grep -r "eval\|Function.*focus\|setTimeout.*focus" src/ || echo "No unsafe focus management found"

  # ================================================================
  # 5) Performance Impact on Accessibility
  # ================================================================
  performance-accessibility:
    name: '⚡ Performance Impact on Accessibility'
    needs: build-site
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - run: pnpm install --frozen-lockfile
      - name: '🚀 Start astro dev'
        id: dev
        run: |
          pnpm astro dev --port ${{ env.DEV_PORT }} --host &
          echo "PID=$!" >> "$GITHUB_OUTPUT"
          for i in {1..30}; do
            sleep 2
            if curl -sf http://localhost:${{ env.DEV_PORT }} > /dev/null; then
              echo "✅ astro dev is up!"; break; fi
            echo "⏳ Waiting for dev server... ($i/30)";
            if [ $i -eq 30 ]; then echo "❌ Server did not start in time" >&2; exit 1; fi
          done
      - name: '⚡ Run Performance Tests'
        run: |
          npx lighthouse http://localhost:${{ env.DEV_PORT }} \
            --only-categories=accessibility,performance \
            --output=json \
            --output-path=./lighthouse-perf-a11y.json \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage"
      - name: '📊 Analyze Performance Impact'
        run: |
          node -e "const r=require('./lighthouse-perf-a11y.json');const a=r.categories.accessibility.score*100;const p=r.categories.performance.score*100;console.log('Accessibility Score:',a);console.log('Performance Score:',p);if(a<95){process.exitCode=1;}"
      - name: '📤 Upload Performance Report'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-accessibility-report
          path: lighthouse-perf-a11y.json
      - name: '🛑 Stop dev server'
        if: always()
        run: |
          kill ${{ steps.dev.outputs.PID }} || true

  # ================================================================
  # 6) Mobile Accessibility Tests
  # ================================================================
  mobile-accessibility:
    name: '📱 Mobile Accessibility Testing'
    needs: build-site
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - run: pnpm install --frozen-lockfile
      - name: '🚀 Start astro dev'
        id: dev
        run: |
          pnpm astro dev --port ${{ env.DEV_PORT }} --host &
          echo "PID=$!" >> "$GITHUB_OUTPUT"
          for i in {1..30}; do
            sleep 2
            if curl -sf http://localhost:${{ env.DEV_PORT }} > /dev/null; then
              echo "✅ astro dev is up!"; break; fi
            echo "⏳ Waiting for dev server... ($i/30)";
            if [ $i -eq 30 ]; then echo "❌ Server did not start in time" >&2; exit 1; fi
          done
      - name: '📱 Test Mobile Accessibility'
        run: |
          npx lighthouse http://localhost:${{ env.DEV_PORT }} \
            --only-categories=accessibility \
            --form-factor=mobile \
            --screenEmulation.mobile=true \
            --screenEmulation.width=375 \
            --screenEmulation.height=667 \
            --output=json \
            --output-path=./mobile-a11y.json \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage"
      - name: '📊 Analyze Mobile Results'
        run: |
          node -e "const r=require('./mobile-a11y.json');const s=r.categories.accessibility.score*100;console.log('Mobile Accessibility Score:',s);if(s<95){process.exitCode=1;}"
      - name: '📤 Upload Mobile Report'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobile-accessibility-report
          path: mobile-a11y.json
      - name: '🛑 Stop dev server'
        if: always()
        run: |
          kill ${{ steps.dev.outputs.PID }} || true

  # ================================================================
  # 7) Accessibility Regression (current vs base)
  # ================================================================
  accessibility-regression:
    name: '🔄 Accessibility Regression Testing'
    if: github.event_name == 'pull_request'
    needs: build-site
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      # -------- current branch --------
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - run: pnpm install --frozen-lockfile
      - name: '🚀 Start astro dev (current)'
        id: dev_current
        run: |
          pnpm astro dev --port ${{ env.DEV_PORT }} --host &
          echo "PID=$!" >> "$GITHUB_OUTPUT"
          for i in {1..30}; do
            sleep 2
            if curl -sf http://localhost:${{ env.DEV_PORT }} > /dev/null; then
              echo "✅ astro dev is up!"; break; fi
            echo "⏳ Waiting for dev server... ($i/30)";
            if [ $i -eq 30 ]; then echo "❌ Server did not start in time" >&2; exit 1; fi
          done
      - name: '🧪 Run Current Branch Tests'
        run: |
          pnpm test:accessibility:ci
          cp -r accessibility-reports current-reports
      - name: '🛑 Stop dev server (current)'
        run: |
          kill ${{ steps.dev.outputs.PID }} || true

      # -------- base branch --------
      - name: '📥 Checkout base branch'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
      - run: pnpm install --frozen-lockfile
      - name: '🚀 Start astro dev (base)'
        id: dev_base
        run: |
          pnpm astro dev --port ${{ env.DEV_PORT }} --host &
          echo "PID=$!" >> "$GITHUB_OUTPUT"
          for i in {1..30}; do
            sleep 2
            if curl -sf http://localhost:${{ env.DEV_PORT }} > /dev/null; then
              echo "✅ astro dev is up!"; break; fi
            echo "⏳ Waiting for dev server... ($i/30)";
            if [ $i -eq 30 ]; then echo "❌ Server did not start in time" >&2; exit 1; fi
          done
      - name: '🧪 Run Base Branch Tests'
        run: |
          pnpm test:accessibility:ci
          cp -r accessibility-reports base-reports
      - name: '🛑 Stop dev server (base)'
        run: |
          kill ${{ steps.dev.outputs.PID }} || true

      - name: '🔍 Compare Results'
        run: |
          echo "Comparing accessibility results..."
          if [ -d "current-reports" ] && [ -d "base-reports" ]; then
            echo "📊 Accessibility regression analysis complete"
            echo "Current reports: $(ls current-reports | wc -l) files"
            echo "Base reports: $(ls base-reports | wc -l) files"
          else
            echo "❌ Unable to compare reports"
          fi

      - name: '📤 Upload Comparison'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-regression-comparison
          path: |
            current-reports/
            base-reports/
